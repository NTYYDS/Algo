连续的数组可以理解为完全二叉树
大根堆定义：用二叉树的方式（数组）来存储，大数为根，往下递减
寻找根机制：（序号-1）/2
删除数据机制：将废弃数据放置序号最末端，数组长度-1（下一次填入数据后会将无用数据覆盖）

堆排序：
    时间复杂度：O（logN）
    方法：
	1）大根堆
	2）把0位置数和N-1位置数交换，size-1（此时最大值已经在最后）
	3）重新调堆一直到size=0

public class text{
    public static void heapSort(int[] arr){
        if (arr == null && arr.length < 2){
            return;
        }
        //将数组当作新数填入 实现大根堆
 /*     for (int i = 0; i < arr.length; i++){//O（N）
            heapInsert(arr,i);//O(logN)
        }*/

        //这种方式时间复杂度为O（N）
       for (int i =  arr.length - 1; i >= 0; i--){
            heapIfy(arr, i, arr.length);
        }
        int heapSize = arr.length;
        swap(arr, 0, --heapSize);
        while (heapSize > 0){//O(N)
            heapIfy(arr, 0, heapSize);//O(logN)
            swap(arr, 0, --heapSize);
        }
    }

    //模型：将数组理解成一个二叉树，要求每一个根部永远比子部分大
    public static void heapInsert(int[] arr, int index){//插入数后，向上排查比大小
        while(arr[index] > arr[(index-1)/2]){//包含两个终止条件
            swap(arr, index, (index-1)/2);
            index = (index - 1)/2;
        }
    }

    private static void heapIfy(int[] arr, int index, int heapSize){//向上排查比大小
        int left = index * 2 + 1;
        while(left < heapSize){
            //largest在这里是最大值的下标序号
            int largest = left + 1 < heapSize && arr[left + 1] > arr[left] ? left + 1 : left;//判断是否存在右边值，若存在则比较
            largest = arr[largest] > arr[index] ? largest : index;
            if (largest == index){//若是相等无需交换
                break;
            }
            swap(arr, largest, index);
            index = largest;
            left = index * 2 + 1;
        }
    }

    public static void swap(int[] arr, int index1, int index2){
        int t = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = t;
    }

    public static void main(String[] args) {
        System.out.println("=============================");
        int[] arr = new int[32];
        for (int i = 0; i < arr.length; i++){
            arr[i] = (int)(Math.random() * 100 + 1);//随机生成1-100的随机值
        }
        System.out.println("随机生成的数组");
        for (int i = 0; i < arr.length; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        System.out.println("=============================");
        System.out.println("使用heapSort排序后");
        heapSort(arr);
        for (int i = 0; i < arr.length; i++){
            System.out.print(arr[i] + " ");
        }
    }
}
